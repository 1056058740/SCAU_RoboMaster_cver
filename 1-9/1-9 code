/*
******************************************************************************
* @file       main.cpp
* @author     Xiaoxiao
* @date       2019-10-8
* @version    3.4.3
* @brief      鼠标事件应用。要求框选ROI并保存，鼠标拖动过程中显示框的线条及鼠标
	          当前像素点RGB及坐标，拖动完成后单独显示ROI，并输出中心像素点坐标
******************************************************************************
*/

#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>

cv::Mat img;
bool select_flag = false;
cv::Rect m_select;
cv::Point origin;
int ROI_count;
char temp[10];
char rgb[10];

void onMouseRectPicking(int event, int x, int y, int, void*)
{
    if (select_flag)
    {
        m_select.x = MIN(origin.x, x);
        // 不一定要等鼠标弹起才计算矩形框，而应该在鼠标按下开始到弹起这段时间实时计算所选矩形框
        m_select.y = MIN(origin.y, y);
        m_select.width = abs(x - origin.x);
        // 算矩形宽度和高度
        m_select.height = abs(y - origin.y);
        m_select &= cv::Rect(0, 0, img.cols, img.rows);
        // 保证所选矩形框在视频显示区域之内

        sprintf(temp, "(%d,%d)", x,y);
        // 显示当前像素坐标
        int b = img.at<cv::Vec3b>(x,y)[0];
        int g = img.at<cv::Vec3b>(x,y)[1];
        int r = img.at<cv::Vec3b>(x,y)[2];
        sprintf(rgb,"(%d,%d,%d)",b,g,r);
        // 显示当前像素RGB信息
        std::string pixelString;
        pixelString += temp;
        pixelString += rgb;

        cv::putText(img, 				// 图像矩阵
            pixelString,                // string型文字内容
            cv::Point(x,y),             // 文字坐标，以左下角为原点
            cv::FONT_HERSHEY_SIMPLEX,   // 字体类型
            1.0, 						// 字体大小
            cv::Scalar(0, 0, 0));       // 字体颜色
        cv::imshow("capframe",img);
    }

    if (event == CV_EVENT_LBUTTONDOWN)
    {
        select_flag = true;
        // 鼠标按下的标志赋真值
        origin = cv::Point(x, y);
        // 保存下来单击捕捉到的点
        m_select = cv::Rect(x, y, 0, 0);
        // 这里一定要初始化，宽和高为(0,0)是因为在opencv中Rect矩形框类内的点是包含左上角那个点的，但是不含右下角那个点


        sprintf(temp, "(%d,%d)", x,y);
        // 显示当前像素坐标
        int b = img.at<cv::Vec3b>(x,y)[0];
        int g = img.at<cv::Vec3b>(x,y)[1];
        int r = img.at<cv::Vec3b>(x,y)[2];
        sprintf(rgb,"(%d,%d,%d)",b,g,r);
        // 显示当前像素RGB信息
        std::string pixelString;
        pixelString += temp;
        pixelString += rgb;

        cv::putText(img, 				// 图像矩阵
            pixelString,                // string型文字内容
            cv::Point(x,y),             // 文字坐标，以左下角为原点
            cv::FONT_HERSHEY_SIMPLEX,   // 字体类型
            1.0, 						// 字体大小
            cv::Scalar(0, 0, 0));       // 字体颜色
        cv::imshow("capframe",img);}


    else if (event == CV_EVENT_LBUTTONUP)
    {
        select_flag = false;
        ROI_count++;

        sprintf(temp, "(%d,%d)", x,y);
        // 显示当前像素坐标
        int b = img.at<cv::Vec3b>(x,y)[0];
        int g = img.at<cv::Vec3b>(x,y)[1];
        int r = img.at<cv::Vec3b>(x,y)[2];
        sprintf(rgb,"(%d,%d,%d)",b,g,r);
        // 显示当前像素RGB信息
        std::string pixelString;
        pixelString += temp;
        pixelString += rgb;

        cv::putText(img, 				// 图像矩阵
            pixelString,                // string型文字内容
            cv::Point(x,y),             // 文字坐标，以左下角为原点
            cv::FONT_HERSHEY_SIMPLEX,   // 字体类型
            1.0, 						// 字体大小
            cv::Scalar(0, 0, 0));       // 字体颜色
        cv::imshow("capframe",img);

        int center_x = origin.x + (x - origin.x)/2;
        int center_y = origin.y + (y - origin.y)/2;
        // 计算中心点坐标

        std::cout<<"框出中心点坐标："<<center_x<<","<<center_y<<std::endl;
    }
}

int main(int argc, char* argv[] )
{

    img=cv::imread("/media/lbb/数据 M/工程猫/猫1.jpg");
    bool stop = false;

    cv::namedWindow("capframe", CV_WINDOW_AUTOSIZE);
    cv::setMouseCallback("capframe", onMouseRectPicking, 0);

    char pic_name[40];
    ROI_count=0;

    while(!stop)
    {
        img=cv::imread("/media/lbb/数据 M/工程猫/猫1.jpg");
        cv::rectangle(img, m_select, cv::Scalar(255,0,0), 2, 8, 0);  // 画矩形框
        cv::imshow("capframe",img);


        if((m_select.x!=0)&&(m_select.y!=0)&&(m_select.width!=0)&&(m_select.height!=0))
        {
            sprintf(pic_name,"ROI_%d.jpg",ROI_count);
            cv::Mat ROI = img(m_select);
            cv::imshow("ROI_WIN",ROI);
            cv::imwrite(pic_name,ROI);
        }


        char key = static_cast<char>(cv::waitKey(30));
        if(key == 27)
            stop = true;
    }
    cv::waitKey(0);
    return 0;
}






